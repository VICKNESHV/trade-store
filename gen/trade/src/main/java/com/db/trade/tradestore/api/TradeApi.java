/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.db.trade.tradestore.api;

import com.db.trade.tradestore.model.StatusMessageResponse;
import com.db.trade.tradestore.model.TradeRequest;
import com.db.trade.tradestore.model.TradeResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-07-23T19:58:22.048+05:30")

@Validated
@Api(value = "trade", description = "the trade API")
@RequestMapping(value = "/api")
public interface TradeApi {

    @ApiOperation(value = "Add/Update a trade to the store", nickname = "addUpdateStore", notes = "Add/Update a trade to the store", response = TradeResponse.class, tags={ "trade store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = TradeResponse.class),
        @ApiResponse(code = 400, message = "The request could not be parsed.", response = StatusMessageResponse.class),
        @ApiResponse(code = 500, message = "The service encountered an internal server error.", response = StatusMessageResponse.class) })
    @RequestMapping(value = "/trade",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TradeResponse> addUpdateStore(@ApiParam(value = "Request to add/update a trade to the store" ,required=true )  @Valid @RequestBody TradeRequest trade);


    @ApiOperation(value = "Returns all the trades from the store", nickname = "listTrades", notes = "Returns the list of trades executed", response = TradeResponse.class, responseContainer = "List", tags={ "trade store", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The service request was processed successfully.", response = TradeResponse.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "The request could not be parsed.", response = StatusMessageResponse.class),
        @ApiResponse(code = 500, message = "The service encountered an internal server error.", response = StatusMessageResponse.class) })
    @RequestMapping(value = "/trade",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<TradeResponse>> listTrades();

}
